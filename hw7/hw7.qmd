---
title: Homework 7 - Creating a Resume Database
author: Alexa "Tig" Harriss
date: last-modified
format:
    html:
        theme: slate
        toc: true
        embed-resources: true
        fontcolor: LightGoldenRodYellow
        backgroundcolor: SlateGrey
        linkcolor: Gold
        code-copy: true
        mermaid:
            theme: forest
---


**GITHUB URL:**  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-TigToggle>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# credntials needed for the program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This database represents a massive copmany group nd includes details about all the people in the company, including their certifications, skills and roles. It will create searching for spesific employeet information easier and allow anyone to query to find employees with particular skillsets in order to make it easier to form team groups that might function well together. 
<br><br>
Includes tables on skills, roles and certifications, and includes a table of desired skills to potentially make the hiring process easier. Each skill can be associated with many, one, or no employees currently working at the company, and includes the date the skill was or will be aquired or the day the certification was awarded or will be awarded.

## Crows-foot diagram

A diagram consisting of all the tables that are part of the database. It is a useful visual for seeing how the database is connected and how it all looks. It includes all their variables. The variable names do not nessisarilly match up exactly to whats in the database. 

```{mermaid}
%%| echo: false
erDiagram
    People }|--|{ PeopleSkills : have
    Skills }|--|{ PeopleSkills : describe
    People }|--|{ PeopleRoles : have
    Roles }|--|{ PeopleRoles : defined-by

    People{
        int id
        string first_name
        string last_name
        string email
        string linkedin_URL
        string headshot_URL
        string breifbio
        string date_joined
    }

    Skills{
        int id
        string skill_name
        string description
        string tag
        string URL 
        string Time_commitment
    }

    PeopleSkills{
        int id
        int skills_id
        int people_id
        string Date_skill_aquired
    }

    Roles{
        int id
        string role_name
        int sortPriority
    }

    PeopleRoles{
        int id
        int people_id
        int role_id
        string date_role_assigned
    }
```

## Examples of data in the database

### People table

The *people* table contains elements that describe all the people stored within the database. It includes their names and useful information that my be handy for getting in contact with them. 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""

#Error Catching
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe skills, including a basic overview of them and how long it may take to learn them. Not all elements within the skill table are skills that employees at the company currently have. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""

#Error Catching
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe roles that people within the company can have. Includes a priority ranking thing that allows the roles to be sorted by priority. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""

#Error Catching
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the contents of the database!

# List skill names, tags, and descriptions ordered by name
The SQL below selects the skill names, tags, and descriptions, and alphabetically organizes them by skill name. 

```{python}
sql = f"""
select Skill_name, Skill_tag, Skill_description
From skills
Order By Skill_name;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
This query lists peoples first name and email adress, and organizes them alphabetically by last_name
```{python}
sql = f"""
select people_first_name, people_email
From people
Order By people_last_name;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List skill names of Person 1
This query lists the all skills held by Person 1 aka "Atticus". 
```{python}
sql = f"""
select skill_name
from peopleskills
inner join skills on peopleskills.skills_id=skills.skills_id
where people_id=1;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names with Skill 6
This lists the names of people who have Skill 6, otherwise known as "Juggling"
```{python}
sql = f"""
select people_first_name
from peopleskills
inner join people on peopleskills.people_id=people.people_id
where skills_id=6;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role
Lists the people with the developer role by their first name. 

```{python}
sql = f"""
select people_first_name
from peopleroles
inner join people on peopleroles.people_id=people.people_id
where role_id=2;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills
Lists the names and email addresses of people who have no skills.
```{python}
sql = f"""
select people_first_name, people_email
from people
left join peopleskills on peopleskills.people_id=people.people_id
where skills_id is null;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills
Lists the names and tags of unused skills, aka, skills that no currently employeed people posesses. 
```{python}
sql = f"""
select skill_name, skill_tag
from skills
left join peopleskills on peopleskills.skills_id=skills.skills_id
where people_id is null;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role
Lists people and their associated skills, but only if they have the boss role
```{python}
sql = f"""
select people_first_name, skill_name
from peopleskills
inner join people on peopleskills.people_id=people.people_id
inner join skills on peopleskills.skills_id=skills.skills_id
inner join peopleroles on peopleskills.people_id=peopleroles.people_id
inner join roles on peopleroles.role_id=roles.role_id
where role_name ="Boss";
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles
Lists the Names of roles that nobody employed has. <br>
NOTE: The table is EMPTY because every role has at least 1 person assigned to it! 
```{python}
sql = f"""
select role_name
from peopleroles
inner join roles on roles.role_id=peopleroles.role_id
where people_id is null;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

This assignment was geuinely enjoyable, besides some of the more tedious parts, overall this was a good experience that ran smoothly for me. The most frustraiting thing for me was the time it took to write everything. There is a lot of very repetative things, both in the creation of the database itself and the things in the qmd file. I had a lot of fun creating the entries when I got to be a little goofy with them, it was fun being able to base them off of my favorite show "Infinity Train" and I enjoyed being able to make the skills things like "Juggling" or "Flying". It was geuinely cool when things actually worked, I could run the code and see the tables I created come to life. The most annoying thing was filling in the dates, if I have one reccomendation for changing anything about this project, it would be remove the 'date aquired' collumn in the peopleskills table and in the peopleroles table. Not only did those take up a lot of time to write out all the dates, but they don't become relevant in the qmd file, and are never listed out anywhere. 

<br><br>
NOTE: I wrote the 'remove dates' suggestion BEFORE Thursdays [11/8/2023]'s lecture.

